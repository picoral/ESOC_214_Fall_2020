[["data-case-study-2.html", "Module 11 Data Case Study 2 11.1 Reading data from a URL 11.2 Cleaning up column names 11.3 Manipulating Dates 11.4 Extra Data libraries 11.5 Exploring Data 11.6 DATA CHALLENGE 06", " Module 11 Data Case Study 2 We’ve been working mainly with the tidyverse library, but today we will work with a few different libraries. The packages janitor and lubridate are very useful. Maybe sure you have these installed (use install.packages) before you load these libraries. library(janitor) ## ## Attaching package: &#39;janitor&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## chisq.test, fisher.test library(lubridate) ## ## Attaching package: &#39;lubridate&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## date, intersect, setdiff, union library(tidyverse) ## ── Attaching packages ───────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.3.0 ── ## ✓ ggplot2 3.3.2 ✓ purrr 0.3.4 ## ✓ tibble 3.0.3 ✓ dplyr 1.0.2 ## ✓ tidyr 1.1.2 ✓ stringr 1.4.0 ## ✓ readr 1.3.1 ✓ forcats 0.5.0 ## ── Conflicts ──────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## x lubridate::as.difftime() masks base::as.difftime() ## x lubridate::date() masks base::date() ## x dplyr::filter() masks stats::filter() ## x lubridate::intersect() masks base::intersect() ## x dplyr::lag() masks stats::lag() ## x lubridate::setdiff() masks base::setdiff() ## x lubridate::union() masks base::union() 11.1 Reading data from a URL Today we are working with a large data set on global land temperatures. I added the csv file to github because it’s a very large file. You can use read_csv to read the file directly from github global_temperatures &lt;- read_csv(&quot;https://raw.githubusercontent.com/esoc214/fall2020_002_class_scripts/main/data/GlobalLandTemperaturesByCountry.csv&quot;) ## Parsed with column specification: ## cols( ## dt = col_date(format = &quot;&quot;), ## AverageTemperature = col_double(), ## AverageTemperatureUncertainty = col_double(), ## Country = col_character() ## ) # inspect data glimpse(global_temperatures) ## Rows: 577,462 ## Columns: 4 ## $ dt &lt;date&gt; 1743-11-01, 1743-12-01, 1744-01-01, 17… ## $ AverageTemperature &lt;dbl&gt; 4.384, NA, NA, NA, NA, 1.530, 6.702, 11… ## $ AverageTemperatureUncertainty &lt;dbl&gt; 2.294, NA, NA, NA, NA, 4.680, 1.789, 1.… ## $ Country &lt;chr&gt; &quot;Åland&quot;, &quot;Åland&quot;, &quot;Åland&quot;, &quot;Åland&quot;, &quot;Ål… 11.2 Cleaning up column names Column names from different data sets usually have a number of different casings (Camel, Pascal, Snake, Kebab Case, etc.). I like to use clean_names() to standardize column names to snake_case. global_temperatures &lt;- global_temperatures %&gt;% clean_names() # inspect data glimpse(global_temperatures) ## Rows: 577,462 ## Columns: 4 ## $ dt &lt;date&gt; 1743-11-01, 1743-12-01, 1744-01-01, … ## $ average_temperature &lt;dbl&gt; 4.384, NA, NA, NA, NA, 1.530, 6.702, … ## $ average_temperature_uncertainty &lt;dbl&gt; 2.294, NA, NA, NA, NA, 4.680, 1.789, … ## $ country &lt;chr&gt; &quot;Åland&quot;, &quot;Åland&quot;, &quot;Åland&quot;, &quot;Åland&quot;, &quot;… 11.3 Manipulating Dates Now, let’s turn our attention to the dt column, which is a date. class(global_temperatures$dt) ## [1] &quot;Date&quot; There’s a number of functions we can run on a Date variable. # extract year from dt variable in global_temperatures year(global_temperatures$dt)[c(1:10)] ## [1] 1743 1743 1744 1744 1744 1744 1744 1744 1744 1744 # extract month from dt variable in global_temperatures month(global_temperatures$dt)[c(1:10)] ## [1] 11 12 1 2 3 4 5 6 7 8 month(global_temperatures$dt, label = TRUE)[c(1:10)] ## [1] Nov Dec Jan Feb Mar Apr May Jun Jul Aug ## 12 Levels: Jan &lt; Feb &lt; Mar &lt; Apr &lt; May &lt; Jun &lt; Jul &lt; Aug &lt; Sep &lt; ... &lt; Dec # extract week from dt variable in global_temperatures week(global_temperatures$dt)[c(1:10)] ## [1] 44 48 1 5 9 14 18 22 27 31 We can create new columns in our data frame with year, month, and week extracted from dt in our data frame by using mutate. global_temperatures %&gt;% mutate(year = year(dt), month = month(dt), decade = year - (year %% 10)) ## # A tibble: 577,462 x 7 ## dt average_temperat… average_temperature_… country year month decade ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1743-11-01 4.38 2.29 Åland 1743 11 1740 ## 2 1743-12-01 NA NA Åland 1743 12 1740 ## 3 1744-01-01 NA NA Åland 1744 1 1740 ## 4 1744-02-01 NA NA Åland 1744 2 1740 ## 5 1744-03-01 NA NA Åland 1744 3 1740 ## 6 1744-04-01 1.53 4.68 Åland 1744 4 1740 ## 7 1744-05-01 6.70 1.79 Åland 1744 5 1740 ## 8 1744-06-01 11.6 1.58 Åland 1744 6 1740 ## 9 1744-07-01 15.3 1.41 Åland 1744 7 1740 ## 10 1744-08-01 NA NA Åland 1744 8 1740 ## # … with 577,452 more rows Instead of just printing to the console, let’s change the original data frame. global_temperatures &lt;- global_temperatures %&gt;% mutate(year = year(dt), month = month(dt), decade = gsub(&quot;([12][0-9][0-9])[0-9]&quot;, &quot;\\\\10&quot;, year)) # inspect changes glimpse(global_temperatures) ## Rows: 577,462 ## Columns: 7 ## $ dt &lt;date&gt; 1743-11-01, 1743-12-01, 1744-01-01, … ## $ average_temperature &lt;dbl&gt; 4.384, NA, NA, NA, NA, 1.530, 6.702, … ## $ average_temperature_uncertainty &lt;dbl&gt; 2.294, NA, NA, NA, NA, 4.680, 1.789, … ## $ country &lt;chr&gt; &quot;Åland&quot;, &quot;Åland&quot;, &quot;Åland&quot;, &quot;Åland&quot;, &quot;… ## $ year &lt;dbl&gt; 1743, 1743, 1744, 1744, 1744, 1744, 1… ## $ month &lt;dbl&gt; 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10… ## $ decade &lt;chr&gt; &quot;1740&quot;, &quot;1740&quot;, &quot;1740&quot;, &quot;1740&quot;, &quot;1740… 11.4 Extra Data libraries If you need some hierarchical information that is not present in your data frame, such as continent based on country, check if there is a package that will do that for you. In our case, we will use the countrycode package. # make sure you install this library library(countrycode) Let’s look at our country variable. # what does country look like in our data? global_temperatures %&gt;% count(country) ## # A tibble: 243 x 2 ## country n ## &lt;chr&gt; &lt;int&gt; ## 1 Afghanistan 2106 ## 2 Africa 1965 ## 3 Åland 3239 ## 4 Albania 3239 ## 5 Algeria 2721 ## 6 American Samoa 1761 ## 7 Andorra 3239 ## 8 Angola 1878 ## 9 Anguilla 2277 ## 10 Antarctica 764 ## # … with 233 more rows We use the function countrycode() to get continent from a country name. # create new column called continent global_temperatures &lt;- global_temperatures %&gt;% mutate(continent = countrycode(sourcevar = country, origin = &quot;country.name&quot;, destination = &quot;continent&quot;)) ## Warning: Problem with `mutate()` input `continent`. ## ℹ Some values were not matched unambiguously: Africa, Antarctica, Asia, Baker Island, Europe, French Southern And Antarctic Lands, Heard Island And Mcdonald Islands, Kingman Reef, North America, Oceania, Palmyra Atoll, Saint Martin, South America, South Georgia And The South Sandwich Isla, Virgin Islands ## ## ℹ Input `continent` is `countrycode(sourcevar = country, origin = &quot;country.name&quot;, destination = &quot;continent&quot;)`. ## Warning in countrycode(sourcevar = country, origin = &quot;country.name&quot;, destination = &quot;continent&quot;): Some values were not matched unambiguously: Africa, Antarctica, Asia, Baker Island, Europe, French Southern And Antarctic Lands, Heard Island And Mcdonald Islands, Kingman Reef, North America, Oceania, Palmyra Atoll, Saint Martin, South America, South Georgia And The South Sandwich Isla, Virgin Islands # inspect data glimpse(global_temperatures) ## Rows: 577,462 ## Columns: 8 ## $ dt &lt;date&gt; 1743-11-01, 1743-12-01, 1744-01-01, … ## $ average_temperature &lt;dbl&gt; 4.384, NA, NA, NA, NA, 1.530, 6.702, … ## $ average_temperature_uncertainty &lt;dbl&gt; 2.294, NA, NA, NA, NA, 4.680, 1.789, … ## $ country &lt;chr&gt; &quot;Åland&quot;, &quot;Åland&quot;, &quot;Åland&quot;, &quot;Åland&quot;, &quot;… ## $ year &lt;dbl&gt; 1743, 1743, 1744, 1744, 1744, 1744, 1… ## $ month &lt;dbl&gt; 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10… ## $ decade &lt;chr&gt; &quot;1740&quot;, &quot;1740&quot;, &quot;1740&quot;, &quot;1740&quot;, &quot;1740… ## $ continent &lt;chr&gt; &quot;Europe&quot;, &quot;Europe&quot;, &quot;Europe&quot;, &quot;Europe… Always check your data. Let’s look at continent more closely, especially since we got a warning message. # why some continents were not assigned global_temperatures %&gt;% filter(is.na(continent)) %&gt;% distinct(country) ## # A tibble: 15 x 1 ## country ## &lt;chr&gt; ## 1 Africa ## 2 Antarctica ## 3 Asia ## 4 Baker Island ## 5 Europe ## 6 French Southern And Antarctic Lands ## 7 Heard Island And Mcdonald Islands ## 8 Kingman Reef ## 9 North America ## 10 Oceania ## 11 Palmyra Atoll ## 12 Saint Martin ## 13 South America ## 14 South Georgia And The South Sandwich Isla ## 15 Virgin Islands It seems we can eliminate the rows with NA for continent. # keep only continents that are not NA global_temp_continents &lt;- global_temperatures %&gt;% filter(!is.na(continent)) 11.5 Exploring Data Now that our data is clean and transformed, what’s our data question? The data frame is still very large, so some summarization would be helpful. global_temp_continents %&gt;% group_by(decade, continent) %&gt;% summarise(mean_temp = mean(average_temperature, na.rm = TRUE)) ## `summarise()` regrouping output by &#39;decade&#39; (override with `.groups` argument) ## # A tibble: 128 x 3 ## # Groups: decade [28] ## decade continent mean_temp ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1740 Americas 2.62 ## 2 1740 Europe 6.98 ## 3 1750 Africa 19.8 ## 4 1750 Americas 7.30 ## 5 1750 Europe 8.53 ## 6 1760 Africa 19.8 ## 7 1760 Americas 6.44 ## 8 1760 Europe 8.31 ## 9 1770 Africa 20.1 ## 10 1770 Americas 6.61 ## # … with 118 more rows It’s still a long data frame, plotting helps here. global_temp_continents %&gt;% group_by(decade, continent) %&gt;% summarise(mean_temp = mean(average_temperature, na.rm = TRUE)) %&gt;% ggplot(aes(x = decade, y = mean_temp, color = continent)) + geom_point() ## `summarise()` regrouping output by &#39;decade&#39; (override with `.groups` argument) Looking at the plot above, how reliable do you think these temperatures are? Why? Let’s look at Europe only. europe_temps &lt;- global_temp_continents %&gt;% filter(continent == &quot;Europe&quot;) europe_temps %&gt;% group_by(decade) %&gt;% summarise(mean_temp = mean(average_temperature, na.rm = TRUE)) %&gt;% ggplot(aes(x = decade, y = mean_temp)) + geom_point() ## `summarise()` ungrouping output (override with `.groups` argument) Now that we have filtered by continent, we can look at year instead of decade, because you have less information to plot (just one continent). europe_temps %&gt;% group_by(year) %&gt;% summarise(mean_temp = mean(average_temperature, na.rm = TRUE)) %&gt;% ggplot(aes(x = year, y = mean_temp)) + geom_point() ## `summarise()` ungrouping output (override with `.groups` argument) ## Warning: Removed 4 rows containing missing values (geom_point). Let’s look at monthly temperatures europe_temps %&gt;% group_by(month) %&gt;% summarise(mean_temp = mean(average_temperature, na.rm = TRUE)) %&gt;% ggplot(aes(x = month, y = mean_temp)) + geom_point() + geom_line() ## `summarise()` ungrouping output (override with `.groups` argument) Would this pattern, of temperature increase around June, be the same no matter the continent? 11.6 DATA CHALLENGE 06 Accept data challenge 06 assignment "]]
